{"ast":null,"code":"import { USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_MAIN_DATA, USER_PERFORMANCE } from \"../datas/data\";\nexport class MockedData {\n  /**\n  * Retrieving the user's first name\n  * @param {number} userId\n  * @returns {string}\n  */\n  getFirstNameById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        console.log(user.userInfos.firstName);\n        return user.userInfos.firstName;\n      }\n    }\n\n    return \"Utilisateur inconnu\";\n  }\n  /**\n   * Creation of an object with the name of the activities in French for the performance graph\n   * @param {number} userId\n   * @returns {array.Object}\n   */\n\n\n  getPerformancesById(userId) {\n    const ACTIVITY_BY_KIND = {\n      1: \"Cardio\",\n      2: \"Energie\",\n      3: \"Endurance\",\n      4: \"Force\",\n      5: \"Vitesse\",\n      6: \"Intensité\"\n    };\n    const activities = [];\n\n    for (let user of USER_PERFORMANCE) {\n      if (user.userId === userId) {\n        for (let item of user.data) {\n          activities.push({\n            activity: ACTIVITY_BY_KIND[item.kind],\n            value: item.value\n          });\n        }\n\n        return activities;\n      }\n    }\n  }\n  /**\n   * Creation of a table with initials of the days of the week\n   * @param {number}} userId\n   * @returns {array.Object}\n   */\n\n\n  getAverageSessionsById(userId) {\n    const averageSessions = [{\n      day: \"L\",\n      sessionLength: 0\n    }, {\n      day: \"M\",\n      sessionLength: 0\n    }, {\n      day: \"M\",\n      sessionLength: 0\n    }, {\n      day: \"J\",\n      sessionLength: 0\n    }, {\n      day: \"V\",\n      sessionLength: 0\n    }, {\n      day: \"S\",\n      sessionLength: 0\n    }, {\n      day: \"D\",\n      sessionLength: 0\n    }];\n\n    for (let user of USER_AVERAGE_SESSIONS) {\n      if (user.userId === userId) {\n        for (let index in user.sessions) {\n          averageSessions[index].sessionLength = user.sessions[index].sessionLength;\n        }\n      }\n    }\n\n    return averageSessions;\n  }\n  /**\n   * creation of a table with day, kg and calorie data for the daily activity graph\n   * @param {number}} userId\n   * @returns {array.Object}\n   */\n\n\n  getDailyActivitiesById(userId) {\n    const dailyActivity = [];\n\n    for (let user of USER_ACTIVITY) {\n      if (user.userId === userId) {\n        user.sessions.forEach((item, index) => {\n          dailyActivity.push({\n            day: `${index + 1}`,\n            kilogram: item.kilogram,\n            calories: item.calories\n          });\n        });\n        return dailyActivity;\n      }\n    }\n  }\n  /**\n   * @param {number} userId\n   * @returns {Object}\n   */\n\n\n  getKeyDataById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.keyData;\n      }\n    }\n  }\n  /**\n   * retrieval of the score for the score graph\n   * @param {number} userId\n   * @returns {number}\n   */\n\n\n  getScoreById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.todayScore;\n      }\n    }\n\n    return 0;\n  }\n  /**\n   * Specialized functions to obtain the data of each service.\n   * @param {string} service\n   * @param {number} userId\n   * @returns {undefined|string|number|Object|array.Object}\n   */\n\n\n  getDataMockedByService(service, userId) {\n    if (userId) {\n      switch (service) {\n        case \"first-name\":\n          return this.getFirstNameById(userId);\n\n        case \"daily-activity\":\n          return this.getDailyActivitiesById(userId);\n\n        case \"average-sessions\":\n          return this.getAverageSessionsById(userId);\n\n        case \"performance\":\n          return this.getPerformancesById(userId);\n\n        case \"score\":\n          return this.getScoreById(userId);\n\n        case \"user\":\n          return this.getKeyDataById(userId);\n\n        default:\n          console.error(`getDataMockedByService error: service \"${service}\" is not defined.`);\n          return;\n      }\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"names":["USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_MAIN_DATA","USER_PERFORMANCE","MockedData","getFirstNameById","userId","user","id","console","log","userInfos","firstName","getPerformancesById","ACTIVITY_BY_KIND","activities","item","data","push","activity","kind","value","getAverageSessionsById","averageSessions","day","sessionLength","index","sessions","getDailyActivitiesById","dailyActivity","forEach","kilogram","calories","getKeyDataById","keyData","getScoreById","todayScore","getDataMockedByService","service","error"],"sources":["/Users/jenniferbouhid/Desktop/Sportsee/Sportsee-Front/src/services/useMockedData.jsx"],"sourcesContent":["import {\n    USER_ACTIVITY,\n    USER_AVERAGE_SESSIONS,\n    USER_MAIN_DATA,\n    USER_PERFORMANCE,\n} from \"../datas/data\";\n\n \nexport class MockedData {\n\n   /**\n   * Retrieving the user's first name\n   * @param {number} userId\n   * @returns {string}\n   */\n  getFirstNameById(userId) {\n    \n      for (let user of USER_MAIN_DATA) {\n        if (user.id === userId) {\n          console.log(user.userInfos.firstName)\n          return user.userInfos.firstName;\n        }\n      }\n  \n      return \"Utilisateur inconnu\";\n  }\n  \n  /**\n   * Creation of an object with the name of the activities in French for the performance graph\n   * @param {number} userId\n   * @returns {array.Object}\n   */\n  getPerformancesById(userId) {\n    const ACTIVITY_BY_KIND = {\n      1: \"Cardio\",\n      2: \"Energie\",\n      3: \"Endurance\",\n      4: \"Force\",\n      5: \"Vitesse\",\n      6: \"Intensité\",\n    };\n\n    const activities = [];\n\n    for (let user of USER_PERFORMANCE) {\n      if (user.userId === userId) {\n        for (let item of user.data) {\n          activities.push({\n            activity: ACTIVITY_BY_KIND[item.kind],\n            value: item.value,\n          });\n        }\n\n        return activities;\n      }\n    }\n  }\n\n  /**\n   * Creation of a table with initials of the days of the week\n   * @param {number}} userId\n   * @returns {array.Object}\n   */\n  getAverageSessionsById(userId) {\n    const averageSessions = [\n      {\n        day: \"L\",\n        sessionLength: 0,\n      },\n      {\n        day: \"M\",\n        sessionLength: 0,\n      },\n      {\n        day: \"M\",\n        sessionLength: 0,\n      },\n      {\n        day: \"J\",\n        sessionLength: 0,\n      },\n      {\n        day: \"V\",\n        sessionLength: 0,\n      },\n      {\n        day: \"S\",\n        sessionLength: 0,\n      },\n      {\n        day: \"D\",\n        sessionLength: 0,\n      },\n    ];\n\n    for (let user of USER_AVERAGE_SESSIONS) {\n      if (user.userId === userId) {\n        for (let index in user.sessions) {\n          averageSessions[index].sessionLength =\n            user.sessions[index].sessionLength;\n        }\n      }\n    }\n\n    return averageSessions;\n  }\n\n  /**\n   * creation of a table with day, kg and calorie data for the daily activity graph\n   * @param {number}} userId\n   * @returns {array.Object}\n   */\n  getDailyActivitiesById(userId) {\n    const dailyActivity = [];\n\n    for (let user of USER_ACTIVITY) {\n      if (user.userId === userId) {\n        user.sessions.forEach((item, index) => {\n          dailyActivity.push({\n            day: `${index+1}`,\n            kilogram: item.kilogram,\n            calories: item.calories,\n          });\n        });\n       \n        return dailyActivity;\n      }\n    }\n\n  }\n\n  /**\n   * @param {number} userId\n   * @returns {Object}\n   */\n  getKeyDataById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.keyData;\n      }\n    }\n  }\n\n  /**\n   * retrieval of the score for the score graph\n   * @param {number} userId\n   * @returns {number}\n   */\n  getScoreById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.todayScore;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * Specialized functions to obtain the data of each service.\n   * @param {string} service\n   * @param {number} userId\n   * @returns {undefined|string|number|Object|array.Object}\n   */\n   getDataMockedByService(service, userId) {\n    if (userId) {\n      switch (service) {\n\n        case \"first-name\":\n          return this.getFirstNameById(userId);\n\n        case \"daily-activity\":\n          return this.getDailyActivitiesById(userId);\n\n        case \"average-sessions\":\n          return this.getAverageSessionsById(userId);\n\n        case \"performance\":\n            return this.getPerformancesById(userId);\n\n        case \"score\":\n          return this.getScoreById(userId);\n\n        case \"user\":\n          return this.getKeyDataById(userId);\n\n        default:\n          console.error(\n            `getDataMockedByService error: service \"${service}\" is not defined.`\n          );\n          return;\n      }\n    }\n\n    return data;\n  }\n}\n  "],"mappings":"AAAA,SACIA,aADJ,EAEIC,qBAFJ,EAGIC,cAHJ,EAIIC,gBAJJ,QAKO,eALP;AAQA,OAAO,MAAMC,UAAN,CAAiB;EAErB;AACH;AACA;AACA;AACA;EACEC,gBAAgB,CAACC,MAAD,EAAS;IAErB,KAAK,IAAIC,IAAT,IAAiBL,cAAjB,EAAiC;MAC/B,IAAIK,IAAI,CAACC,EAAL,KAAYF,MAAhB,EAAwB;QACtBG,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,SAAL,CAAeC,SAA3B;QACA,OAAOL,IAAI,CAACI,SAAL,CAAeC,SAAtB;MACD;IACF;;IAED,OAAO,qBAAP;EACH;EAED;AACF;AACA;AACA;AACA;;;EACEC,mBAAmB,CAACP,MAAD,EAAS;IAC1B,MAAMQ,gBAAgB,GAAG;MACvB,GAAG,QADoB;MAEvB,GAAG,SAFoB;MAGvB,GAAG,WAHoB;MAIvB,GAAG,OAJoB;MAKvB,GAAG,SALoB;MAMvB,GAAG;IANoB,CAAzB;IASA,MAAMC,UAAU,GAAG,EAAnB;;IAEA,KAAK,IAAIR,IAAT,IAAiBJ,gBAAjB,EAAmC;MACjC,IAAII,IAAI,CAACD,MAAL,KAAgBA,MAApB,EAA4B;QAC1B,KAAK,IAAIU,IAAT,IAAiBT,IAAI,CAACU,IAAtB,EAA4B;UAC1BF,UAAU,CAACG,IAAX,CAAgB;YACdC,QAAQ,EAAEL,gBAAgB,CAACE,IAAI,CAACI,IAAN,CADZ;YAEdC,KAAK,EAAEL,IAAI,CAACK;UAFE,CAAhB;QAID;;QAED,OAAON,UAAP;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEO,sBAAsB,CAAChB,MAAD,EAAS;IAC7B,MAAMiB,eAAe,GAAG,CACtB;MACEC,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CADsB,EAKtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CALsB,EAStB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CATsB,EAatB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CAbsB,EAiBtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CAjBsB,EAqBtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CArBsB,EAyBtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CAzBsB,CAAxB;;IA+BA,KAAK,IAAIlB,IAAT,IAAiBN,qBAAjB,EAAwC;MACtC,IAAIM,IAAI,CAACD,MAAL,KAAgBA,MAApB,EAA4B;QAC1B,KAAK,IAAIoB,KAAT,IAAkBnB,IAAI,CAACoB,QAAvB,EAAiC;UAC/BJ,eAAe,CAACG,KAAD,CAAf,CAAuBD,aAAvB,GACElB,IAAI,CAACoB,QAAL,CAAcD,KAAd,EAAqBD,aADvB;QAED;MACF;IACF;;IAED,OAAOF,eAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEK,sBAAsB,CAACtB,MAAD,EAAS;IAC7B,MAAMuB,aAAa,GAAG,EAAtB;;IAEA,KAAK,IAAItB,IAAT,IAAiBP,aAAjB,EAAgC;MAC9B,IAAIO,IAAI,CAACD,MAAL,KAAgBA,MAApB,EAA4B;QAC1BC,IAAI,CAACoB,QAAL,CAAcG,OAAd,CAAsB,CAACd,IAAD,EAAOU,KAAP,KAAiB;UACrCG,aAAa,CAACX,IAAd,CAAmB;YACjBM,GAAG,EAAG,GAAEE,KAAK,GAAC,CAAE,EADC;YAEjBK,QAAQ,EAAEf,IAAI,CAACe,QAFE;YAGjBC,QAAQ,EAAEhB,IAAI,CAACgB;UAHE,CAAnB;QAKD,CAND;QAQA,OAAOH,aAAP;MACD;IACF;EAEF;EAED;AACF;AACA;AACA;;;EACEI,cAAc,CAAC3B,MAAD,EAAS;IACrB,KAAK,IAAIC,IAAT,IAAiBL,cAAjB,EAAiC;MAC/B,IAAIK,IAAI,CAACC,EAAL,KAAYF,MAAhB,EAAwB;QACtB,OAAOC,IAAI,CAAC2B,OAAZ;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEC,YAAY,CAAC7B,MAAD,EAAS;IACnB,KAAK,IAAIC,IAAT,IAAiBL,cAAjB,EAAiC;MAC/B,IAAIK,IAAI,CAACC,EAAL,KAAYF,MAAhB,EAAwB;QACtB,OAAOC,IAAI,CAAC6B,UAAZ;MACD;IACF;;IACD,OAAO,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACGC,sBAAsB,CAACC,OAAD,EAAUhC,MAAV,EAAkB;IACvC,IAAIA,MAAJ,EAAY;MACV,QAAQgC,OAAR;QAEE,KAAK,YAAL;UACE,OAAO,KAAKjC,gBAAL,CAAsBC,MAAtB,CAAP;;QAEF,KAAK,gBAAL;UACE,OAAO,KAAKsB,sBAAL,CAA4BtB,MAA5B,CAAP;;QAEF,KAAK,kBAAL;UACE,OAAO,KAAKgB,sBAAL,CAA4BhB,MAA5B,CAAP;;QAEF,KAAK,aAAL;UACI,OAAO,KAAKO,mBAAL,CAAyBP,MAAzB,CAAP;;QAEJ,KAAK,OAAL;UACE,OAAO,KAAK6B,YAAL,CAAkB7B,MAAlB,CAAP;;QAEF,KAAK,MAAL;UACE,OAAO,KAAK2B,cAAL,CAAoB3B,MAApB,CAAP;;QAEF;UACEG,OAAO,CAAC8B,KAAR,CACG,0CAAyCD,OAAQ,mBADpD;UAGA;MAxBJ;IA0BD;;IAED,OAAOrB,IAAP;EACD;;AA1LqB"},"metadata":{},"sourceType":"module"}