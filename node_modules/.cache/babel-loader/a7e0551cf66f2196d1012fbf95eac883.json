{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { MockedData } from \"./useMockedData\";\nimport { useSportSeeApi } from \"./useSportSeeApi\";\nimport { useMockedData } from \"../datas/data\";\n/**\n * recovery of api data or mocked data if the back is not available\n * @param {string} service \n * @param {number} userId \n * @returns {array.Object|Object|undefined}\n */\n\nexport function FacadePattern(service, userId) {\n  _s();\n\n  const {\n    data,\n    error,\n    isLoading\n  } = useSportSeeApi(service, userId);\n  console.log(service, userId);\n  /**\n   * Use mocked data if api access unavailable \n   */\n\n  if (!useMockedData) {\n    console.log(useMockedData);\n    const mockedData = new MockedData();\n    return mockedData.getDataMockedByService(service, userId);\n  }\n\n  console.log({\n    data,\n    error,\n    isLoading\n  });\n  return {\n    data,\n    error,\n    isLoading\n  };\n}\n\n_s(FacadePattern, \"ASq1Bzk31Xom8MxZkK/tNbCr5Tg=\", false, function () {\n  return [useSportSeeApi];\n});\n\n_c = FacadePattern;\n\nvar _c;\n\n$RefreshReg$(_c, \"FacadePattern\");","map":{"version":3,"names":["MockedData","useSportSeeApi","useMockedData","FacadePattern","service","userId","data","error","isLoading","console","log","mockedData","getDataMockedByService"],"sources":["/Users/jenniferbouhid/Desktop/Sportsee/Sportsee-Front/src/services/FacadePattern.js"],"sourcesContent":["import { MockedData } from \"./useMockedData\";\nimport { useSportSeeApi } from \"./useSportSeeApi\";\nimport { useMockedData } from \"../datas/data\";\n\n/**\n * recovery of api data or mocked data if the back is not available\n * @param {string} service \n * @param {number} userId \n * @returns {array.Object|Object|undefined}\n */\nexport function FacadePattern(service, userId) {\n    \n    const {data, error, isLoading } = useSportSeeApi(service, userId);\n    console.log(service, userId)\n    /**\n     * Use mocked data if api access unavailable \n     */\n    if( !useMockedData ) {\n        console.log(useMockedData)\n        const mockedData = new MockedData();\n        return mockedData.getDataMockedByService(service, userId);\n    }\n   console.log({data, error, isLoading })\n    return {data, error, isLoading };\n}\n\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,eAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,MAAhC,EAAwC;EAAA;;EAE3C,MAAM;IAACC,IAAD;IAAOC,KAAP;IAAcC;EAAd,IAA4BP,cAAc,CAACG,OAAD,EAAUC,MAAV,CAAhD;EACAI,OAAO,CAACC,GAAR,CAAYN,OAAZ,EAAqBC,MAArB;EACA;AACJ;AACA;;EACI,IAAI,CAACH,aAAL,EAAqB;IACjBO,OAAO,CAACC,GAAR,CAAYR,aAAZ;IACA,MAAMS,UAAU,GAAG,IAAIX,UAAJ,EAAnB;IACA,OAAOW,UAAU,CAACC,sBAAX,CAAkCR,OAAlC,EAA2CC,MAA3C,CAAP;EACH;;EACFI,OAAO,CAACC,GAAR,CAAY;IAACJ,IAAD;IAAOC,KAAP;IAAcC;EAAd,CAAZ;EACC,OAAO;IAACF,IAAD;IAAOC,KAAP;IAAcC;EAAd,CAAP;AACH;;GAdeL,a;UAEsBF,c;;;KAFtBE,a"},"metadata":{},"sourceType":"module"}