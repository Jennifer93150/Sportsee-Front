{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { MockedData } from \"./useMockedData\";\nimport { useSportSeeApi } from \"./useSportSeeApi\";\nimport { useMockedData } from \"../datas/data\";\nimport { Error } from \"../pages/Error\";\n/**\n * recovery of api data or mocked data if the back is not available\n * @param {string} service \n * @param {number} userId \n * @returns {array.Object|Object}\n */\n\nexport async function FacadePattern(service, userId) {\n  _s();\n\n  const {\n    data,\n    isLoading,\n    error\n  } = await useSportSeeApi(service, userId);\n  /**\n   * Use mocked data if api access unavailable \n   */\n\n  if (!useMockedData || isLoading) {\n    console.log('En attendant d\\'accéder à l\\'Api, nous utilisons les données mockées pour le service ' + service);\n    const mockedData = new MockedData();\n    return mockedData.getDataMockedByService(service, userId);\n  }\n\n  return data;\n}\n\n_s(FacadePattern, \"KrEg0O8YxNHBbpXyk0l+0KTZv8A=\", false, function () {\n  return [useSportSeeApi];\n});\n\n_c = FacadePattern;\n\nvar _c;\n\n$RefreshReg$(_c, \"FacadePattern\");","map":{"version":3,"names":["MockedData","useSportSeeApi","useMockedData","Error","FacadePattern","service","userId","data","isLoading","error","console","log","mockedData","getDataMockedByService"],"sources":["/Users/jenniferbouhid/Desktop/Sportsee/Sportsee-Front/src/services/FacadePattern.js"],"sourcesContent":["import { MockedData } from \"./useMockedData\";\nimport { useSportSeeApi } from \"./useSportSeeApi\";\nimport { useMockedData } from \"../datas/data\";\nimport { Error } from \"../pages/Error\";\n\n/**\n * recovery of api data or mocked data if the back is not available\n * @param {string} service \n * @param {number} userId \n * @returns {array.Object|Object}\n */\nexport async function FacadePattern(service, userId) {\n    \n    const {data, isLoading, error} = await useSportSeeApi(service, userId);\n    \n    /**\n     * Use mocked data if api access unavailable \n     */\n    if( !useMockedData || isLoading ) {\n        console.log('En attendant d\\'accéder à l\\'Api, nous utilisons les données mockées pour le service '+service)\n        const mockedData = new MockedData();\n        return mockedData.getDataMockedByService(service, userId);\n    }\n\n    return data\n}\n\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,aAAf,CAA6BC,OAA7B,EAAsCC,MAAtC,EAA8C;EAAA;;EAEjD,MAAM;IAACC,IAAD;IAAOC,SAAP;IAAkBC;EAAlB,IAA2B,MAAMR,cAAc,CAACI,OAAD,EAAUC,MAAV,CAArD;EAEA;AACJ;AACA;;EACI,IAAI,CAACJ,aAAD,IAAkBM,SAAtB,EAAkC;IAC9BE,OAAO,CAACC,GAAR,CAAY,0FAAwFN,OAApG;IACA,MAAMO,UAAU,GAAG,IAAIZ,UAAJ,EAAnB;IACA,OAAOY,UAAU,CAACC,sBAAX,CAAkCR,OAAlC,EAA2CC,MAA3C,CAAP;EACH;;EAED,OAAOC,IAAP;AACH;;GAdqBH,a;UAEqBH,c;;;KAFrBG,a"},"metadata":{},"sourceType":"module"}