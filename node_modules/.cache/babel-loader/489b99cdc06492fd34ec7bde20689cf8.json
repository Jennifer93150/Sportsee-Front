{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { MockedData } from \"./useMockedData\";\nimport { useSportSeeApi } from \"./useSportSeeApi\";\nimport { useMockedData } from \"../datas/data\";\n/**\n * recovery of api data or mocked data if the back is not available\n * @param {string} service \n * @param {number} userId \n * @returns {array.Object || object }\n */\n\nexport function FacadePattern(service, userId) {\n  _s();\n\n  //const { data, error, isLoading } = useSportSeeApi(service, userId);\n  useSportSeeApi(service, userId) ? useSportSeeApi(service, userId) : mockedData.getDataMockedByService(service, userId);\n  /**\n   * If api access unavailable use mocked data\n   */\n\n  if (useMockedData) {\n    const mockedData = new MockedData();\n    return mockedData.getDataMockedByService(service, userId);\n  }\n\n  console.log(data);\n  return {\n    data,\n    error,\n    isLoading\n  };\n}\n\n_s(FacadePattern, \"7xipq7ZEzHKUjqROzT3IhYZ9YS8=\", false, function () {\n  return [useSportSeeApi, useSportSeeApi];\n});\n\n_c = FacadePattern;\n\nvar _c;\n\n$RefreshReg$(_c, \"FacadePattern\");","map":{"version":3,"names":["MockedData","useSportSeeApi","useMockedData","FacadePattern","service","userId","mockedData","getDataMockedByService","console","log","data","error","isLoading"],"sources":["/Users/jenniferbouhid/Desktop/Sportsee/Sportsee-Front/src/services/FacadePattern.js"],"sourcesContent":["import { MockedData } from \"./useMockedData\";\nimport { useSportSeeApi } from \"./useSportSeeApi\";\nimport { useMockedData } from \"../datas/data\";\n\n/**\n * recovery of api data or mocked data if the back is not available\n * @param {string} service \n * @param {number} userId \n * @returns {array.Object || object }\n */\nexport function FacadePattern(service, userId) {\n    \n    //const { data, error, isLoading } = useSportSeeApi(service, userId);\n    useSportSeeApi(service, userId) ? useSportSeeApi(service, userId) : mockedData.getDataMockedByService(service, userId)\n    /**\n     * If api access unavailable use mocked data\n     */\n    if( useMockedData ) {\n        const mockedData = new MockedData();\n        return mockedData.getDataMockedByService(service, userId);\n    }\n        console.log(data)\n    return { data, error, isLoading }\n    \n    \n}\n\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,eAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,MAAhC,EAAwC;EAAA;;EAE3C;EACAJ,cAAc,CAACG,OAAD,EAAUC,MAAV,CAAd,GAAkCJ,cAAc,CAACG,OAAD,EAAUC,MAAV,CAAhD,GAAoEC,UAAU,CAACC,sBAAX,CAAkCH,OAAlC,EAA2CC,MAA3C,CAApE;EACA;AACJ;AACA;;EACI,IAAIH,aAAJ,EAAoB;IAChB,MAAMI,UAAU,GAAG,IAAIN,UAAJ,EAAnB;IACA,OAAOM,UAAU,CAACC,sBAAX,CAAkCH,OAAlC,EAA2CC,MAA3C,CAAP;EACH;;EACGG,OAAO,CAACC,GAAR,CAAYC,IAAZ;EACJ,OAAO;IAAEA,IAAF;IAAQC,KAAR;IAAeC;EAAf,CAAP;AAGH;;GAfeT,a;UAGZF,c,EAAkCA,c;;;KAHtBE,a"},"metadata":{},"sourceType":"module"}