{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nconst BASE_URL = \"http://localhost:3000\";\nconst ACTIVITY_BY_KIND = {\n  1: \"Cardio\",\n  2: \"Energie\",\n  3: \"Endurance\",\n  4: \"Force\",\n  5: \"Vitesse\",\n  6: \"Intensité\"\n};\n/**\n * Service that retrieves data from SportSeeAPI to feed the dashboard.\n * @param {string} service\n * @param {number} userId\n * @returns {undefined|array.Object}\n */\n\nexport function useSportSeeApi(service, userId) {\n  _s();\n\n  /** the \"service\" parameter allows access to the endpoint*/\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  /**\n   * List of endpoints\n   */\n\n  const endpoints = {\n    \"first-name\": `user/${userId}`,\n    \"user\": `user/${userId}`,\n    \"daily-activity\": `user/${userId}/activity`,\n    \"average-sessions\": `user/${userId}/average-sessions`,\n    \"performance\": `user/${userId}/performance`,\n    \"score\": `user/${userId}`\n  };\n  let endpoint;\n  useEffect(() => {\n    for (let i in endpoints) {\n      let value = endpoints[i];\n\n      if (i === service) {\n        endpoint = value;\n      }\n    }\n\n    if (!endpoint) return;\n    setIsLoading(true);\n\n    async function fetchData() {\n      try {\n        const url = `${BASE_URL}/${endpoint}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        const extractedData = extractDataByService(data, service);\n        setData(extractedData);\n      } catch (err) {\n        console.error(`An error occured while fetching ${endpoint} : ${err}`);\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [service, userId, endpoint]);\n  return {\n    data,\n    isLoading,\n    error\n  }; //   setIsLoading(true);\n  //   /**\n  //    * API data recovery\n  //    */\n  //   fetch(`${BASE_URL}/${endpoint}`)\n  //     .then(res =>res.json())\n  //     .then((data) => {\n  //           const extractedData = getDataByService(data, service);\n  //           setData(extractedData);\n  //           console.log(data)\n  //           setIsLoading(false);\n  //     })\n  //     .catch ((err) =>{\n  //         console.error(`An error occured while fetching ${endpoint} : ${err}`);\n  //         setError(true);\n  //     })\n  // }, [service, userId, endpoint]);\n  // return { data, isLoading, error };\n}\n/**\n * Specialized functions to obtain the data of each service.\n * @param {string|Object} data\n * @param {string} service\n * @returns {undefined|string|number|Object|array.Object}\n */\n\n_s(useSportSeeApi, \"WJYBqn2c+jk5gbHkf/rp07sHMmE=\");\n\nfunction getDataByService(data, service) {\n  if (data) {\n    switch (service) {\n      case \"first-name\":\n        return getFirstName(data.data.userInfos.firstName);\n\n      case \"daily-activity\":\n        return getDailyActivities(data.data.sessions);\n\n      case \"average-sessions\":\n        return getAverageSessions(data.data.sessions);\n\n      case \"performance\":\n        return getActivities(data.data.data);\n\n      case \"score\":\n        return getScore(data);\n\n      case \"user\":\n        return getKeyData(data);\n\n      default:\n        console.error(`getDataByService error: service \"${service}\" is not defined.`);\n        return;\n    }\n  }\n\n  console.error(\"getDataByService error: no data to process.\");\n  return;\n}\n/**\n * Retrieving the user's first name\n * @param {string} userData\n * @returns {string} user first name\n */\n\n\nfunction getFirstName(userData) {\n  console.log(userData);\n  return userData === \"\" ? \"Nous n'arrivons pas à vous identifier\" : userData;\n}\n/**\n * creation of a table with kind and her value for the performance graph\n * @param {array.Object} userData\n * @returns {array.Object} data for Performance.jsx\n */\n\n\nfunction getActivities(userData) {\n  const activities = [];\n\n  if (userData) {\n    for (let item of userData) {\n      activities.push({\n        activity: ACTIVITY_BY_KIND[item.kind],\n        value: item.value\n      });\n    }\n\n    return activities;\n  } // return defaultActivities();\n\n}\n/**\n * Creation of a table with initials of the days of the week\n * @returns {array.Object} default data for AverageSessions.jsx\n */\n\n\nexport function defaultAverageSessions() {\n  const averageSessions = [{\n    day: \"L\",\n    sessionLength: 0\n  }, {\n    day: \"M\",\n    sessionLength: 0\n  }, {\n    day: \"M\",\n    sessionLength: 0\n  }, {\n    day: \"J\",\n    sessionLength: 0\n  }, {\n    day: \"V\",\n    sessionLength: 0\n  }, {\n    day: \"S\",\n    sessionLength: 0\n  }, {\n    day: \"D\",\n    sessionLength: 0\n  }];\n  return averageSessions;\n}\n/**\n * Creation of a table with initials of the days of the week for average session graph\n * @param {array.Object} userData\n * @returns {array.Object} data for AverageSessions.jsx\n */\n\nfunction getAverageSessions(userData) {\n  let averageSessions = defaultAverageSessions();\n\n  for (let index in userData) {\n    /** \n     * Replace each default (0) sessionLength with sessionLength from api data \n     * as well as the number of days by the initials of the days\n     */\n    averageSessions[index].sessionLength = userData[index].sessionLength;\n  }\n\n  return averageSessions;\n}\n/**\n * creation of a table with day, kg and calorie data For the daily activity graph\n * @param {array.Object} userData\n * @returns {array.Object} dailyActivity\n */\n\n\nfunction getDailyActivities(userData) {\n  if (userData) {\n    const dailyActivity = [];\n\n    for (let item of userData) {\n      /** split the date to get only the day */\n      const [yyyy, mm, dd] = item.day.split(\"-\");\n      const [diz, unit] = dd;\n      dailyActivity.push({\n        /** if the day is less than 10 I keep only the units digit */\n        day: `${dd}` < 10 ? unit : `${dd}`,\n        kilogram: item.kilogram,\n        calories: item.calories\n      });\n    }\n\n    return dailyActivity;\n  } // return defaultDailyActivities();\n\n}\n/**\n * data recovery for calorie cards\n * @param {array.Objet} userData \n * @returns {array.Objet}\n */\n\n\nfunction getKeyData(userData) {\n  return userData === \"\" ? \"Impossible d'obtenir l'utilisateur\" : userData.data.keyData;\n}\n/**\n * retrieval of the score for the score graph\n * @param {number} userData \n * @returns number\n */\n\n\nfunction getScore(userData) {\n  return userData === \"\" ? 0 : userData.data.todayScore || userData.data.score;\n}","map":{"version":3,"names":["useEffect","useState","BASE_URL","ACTIVITY_BY_KIND","useSportSeeApi","service","userId","data","setData","isLoading","setIsLoading","error","setError","endpoints","endpoint","i","value","fetchData","url","response","fetch","json","extractedData","extractDataByService","err","console","getDataByService","getFirstName","userInfos","firstName","getDailyActivities","sessions","getAverageSessions","getActivities","getScore","getKeyData","userData","log","activities","item","push","activity","kind","defaultAverageSessions","averageSessions","day","sessionLength","index","dailyActivity","yyyy","mm","dd","split","diz","unit","kilogram","calories","keyData","todayScore","score"],"sources":["/Users/jenniferbouhid/Desktop/Sportsee/Sportsee-Front/src/services/useSportSeeApi.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst BASE_URL = \"http://localhost:3000\";\n\nconst ACTIVITY_BY_KIND = {\n  1: \"Cardio\",\n  2: \"Energie\",\n  3: \"Endurance\",\n  4: \"Force\",\n  5: \"Vitesse\",\n  6: \"Intensité\",\n};\n\n/**\n * Service that retrieves data from SportSeeAPI to feed the dashboard.\n * @param {string} service\n * @param {number} userId\n * @returns {undefined|array.Object}\n */\nexport function useSportSeeApi(service, userId) {\n  \n  /** the \"service\" parameter allows access to the endpoint*/\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  /**\n   * List of endpoints\n   */\n  const endpoints ={\n    \"first-name\" :`user/${userId}`,\n    \"user\" : `user/${userId}`, \n    \"daily-activity\" : `user/${userId}/activity`, \n    \"average-sessions\": `user/${userId}/average-sessions`,\n    \"performance\" : `user/${userId}/performance`,\n    \"score\" : `user/${userId}`\n  }\n\n  let endpoint;\n  \n  useEffect(() => {\n\n    for(let i in endpoints){\n        let value = endpoints[i];\n        if(i === service){\n          endpoint = value;\n        }\n    }\n    if (!endpoint) return;\n\n    setIsLoading(true);\n\n    async function fetchData() {\n      try {\n        const url = `${BASE_URL}/${endpoint}`;\n\n        const response = await fetch(url);\n        const data = await response.json();\n        const extractedData = extractDataByService(data, service);\n\n        setData(extractedData);\n      } catch (err) {\n        console.error(`An error occured while fetching ${endpoint} : ${err}`);\n\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [service, userId, endpoint]);\n\n  return { data, isLoading, error };\n  //   setIsLoading(true);\n\n  //   /**\n  //    * API data recovery\n  //    */\n  //   fetch(`${BASE_URL}/${endpoint}`)\n  //     .then(res =>res.json())\n  //     .then((data) => {\n  //           const extractedData = getDataByService(data, service);\n  //           setData(extractedData);\n  //           console.log(data)\n  //           setIsLoading(false);\n  //     })\n  //     .catch ((err) =>{\n  //         console.error(`An error occured while fetching ${endpoint} : ${err}`);\n  //         setError(true);\n  //     })\n   \n  // }, [service, userId, endpoint]);\n  \n  // return { data, isLoading, error };\n}\n\n/**\n * Specialized functions to obtain the data of each service.\n * @param {string|Object} data\n * @param {string} service\n * @returns {undefined|string|number|Object|array.Object}\n */\nfunction getDataByService(data, service) {\n  if (data) {\n    switch (service) {\n\n      case \"first-name\":\n        return getFirstName(data.data.userInfos.firstName);\n\n      case \"daily-activity\":\n        return getDailyActivities(data.data.sessions);\n\n      case \"average-sessions\":\n          return getAverageSessions(data.data.sessions);\n  \n      case \"performance\":\n        return getActivities(data.data.data);\n\n      case \"score\":\n        return getScore(data);\n\n      case \"user\":\n          return getKeyData(data);\n\n      default:\n        console.error(\n          `getDataByService error: service \"${service}\" is not defined.`\n        );\n        return;\n    }\n  }\n\n  console.error(\"getDataByService error: no data to process.\");\n  return;\n}\n\n/**\n * Retrieving the user's first name\n * @param {string} userData\n * @returns {string} user first name\n */\n function getFirstName(userData) {\n  console.log(userData)\n  return userData === \"\"\n    ? \"Nous n'arrivons pas à vous identifier\"\n    : userData;\n}\n\n/**\n * creation of a table with kind and her value for the performance graph\n * @param {array.Object} userData\n * @returns {array.Object} data for Performance.jsx\n */\nfunction getActivities(userData) {\n  const activities = [];\n  if (userData) {\n    for (let item of userData) {\n      activities.push({\n        activity: ACTIVITY_BY_KIND[item.kind],\n        value: item.value,\n      });\n    }\n\n    return activities;\n  }\n\n  // return defaultActivities();\n}\n\n/**\n * Creation of a table with initials of the days of the week\n * @returns {array.Object} default data for AverageSessions.jsx\n */\nexport function defaultAverageSessions() {\n  const averageSessions = [\n    {\n      day: \"L\",\n      sessionLength: 0,\n    },\n    {\n      day: \"M\",\n      sessionLength: 0,\n    },\n    {\n      day: \"M\",\n      sessionLength: 0,\n    },\n    {\n      day: \"J\",\n      sessionLength: 0,\n    },\n    {\n      day: \"V\",\n      sessionLength: 0,\n    },\n    {\n      day: \"S\",\n      sessionLength: 0,\n    },\n    {\n      day: \"D\",\n      sessionLength: 0,\n    },\n  ];\n\n  return averageSessions;\n}\n\n/**\n * Creation of a table with initials of the days of the week for average session graph\n * @param {array.Object} userData\n * @returns {array.Object} data for AverageSessions.jsx\n */\nfunction getAverageSessions(userData) {\n  \n  let averageSessions = defaultAverageSessions();\n  \n  for (let index in userData) {\n    /** \n     * Replace each default (0) sessionLength with sessionLength from api data \n     * as well as the number of days by the initials of the days\n     */\n    averageSessions[index].sessionLength = userData[index].sessionLength;\n  }\n  \n  return averageSessions;\n}\n\n/**\n * creation of a table with day, kg and calorie data For the daily activity graph\n * @param {array.Object} userData\n * @returns {array.Object} dailyActivity\n */\nfunction getDailyActivities(userData) {\n  \n  if (userData) {\n    const dailyActivity = [];\n\n    for (let item of userData) {\n      /** split the date to get only the day */\n      const [yyyy, mm, dd] = item.day.split(\"-\");\n      const [diz, unit] = dd\n      \n      dailyActivity.push({\n        /** if the day is less than 10 I keep only the units digit */\n        day: `${dd}` < 10 ? unit : `${dd}`,\n        kilogram: item.kilogram,\n        calories: item.calories,\n      });\n    }\n    return dailyActivity;\n  }\n\n  // return defaultDailyActivities();\n}\n\n/**\n * data recovery for calorie cards\n * @param {array.Objet} userData \n * @returns {array.Objet}\n */\nfunction getKeyData(userData) {\n  return userData === \"\" ? \"Impossible d'obtenir l'utilisateur\" : userData.data.keyData;\n  \n}\n\n/**\n * retrieval of the score for the score graph\n * @param {number} userData \n * @returns number\n */\nfunction getScore(userData) {\n  return userData === \"\" ? 0 : userData.data.todayScore || userData.data.score;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}