{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nconst BASE_URL = \"http://localhost:3000\";\nconst ACTIVITY_BY_KIND = {\n  1: \"Cardio\",\n  2: \"Energie\",\n  3: \"Endurance\",\n  4: \"Force\",\n  5: \"Vitesse\",\n  6: \"Intensité\"\n};\n/**\n * Hook used to extract data from SportSeeAPI to feed the dashboard.\n * @param {string} service\n * @param {string} userId\n * @returns {undefined|Object}\n */\n\nexport function useSportSeeApi(service, userId) {\n  _s();\n\n  /** ici le param service sera par ex \"daily-activity\" \n   * (liste ds fonction getEndpointByService) \n   */\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const endpoints = {\n    \"un\": 1,\n    \"deux\": 2,\n    \"trois\": 3,\n    \"un\": 1,\n    \"deux\": 2,\n    \"trois\": 3\n  };\n  const endpoint = getEndpointByService(service, userId);\n  useEffect(() => {\n    if (!endpoint) return;\n    setIsLoading(true);\n\n    async function fetchData() {\n      try {\n        const url = `${BASE_URL}/${endpoint}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(extractDataByService(data, service));\n        const extractedData = extractDataByService(data, service);\n        setData(extractedData);\n      } catch (err) {\n        console.error(`An error occured while fetching ${endpoint} : ${err}`);\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [service, userId, endpoint]);\n  return {\n    data,\n    isLoading,\n    error\n  };\n}\n/**\n * @param {string} service \n * @param {string} userId \n * @returns {string} endpoint associated to the service and id\n */\n\n_s(useSportSeeApi, \"WJYBqn2c+jk5gbHkf/rp07sHMmE=\");\n\nfunction getEndpointByService(service, userId) {\n  console.log(service);\n\n  switch (service) {\n    case \"activities\":\n      return `user/${userId}/performance`;\n\n    case \"average-sessions\":\n      return `user/${userId}/average-sessions`;\n\n    case \"daily-activity\":\n      return `user/${userId}/activity`;\n\n    case \"firstName\":\n      return `user/${userId}`;\n\n    case \"key-data\":\n      return `user/${userId}`;\n\n    case \"today-score\":\n      return `user/${userId}`;\n\n    default:\n      return null;\n  }\n}\n/**\n * Factory appealing specialized functions to extract data for each service.\n * @param {string|Object} data\n * @param {string} service\n * @returns {undefined|string|number|Object|array.Object}\n */\n\n\nfunction extractDataByService(data, service) {\n  console.log(data);\n\n  if (data) {\n    switch (service) {\n      case \"activities\":\n        return getActivities(data.data.data);\n\n      case \"average-sessions\":\n        return getAverageSessions(data.data.sessions);\n\n      case \"daily-activity\":\n        return getDailyActivity(data.data.sessions);\n\n      case \"firstName\":\n        return getFirstName(data);\n\n      case \"key-data\":\n        return getKeyData(data);\n\n      case \"today-score\":\n        return getTodayScore(data);\n\n      default:\n        console.error(`extractDataByService error: service \"${service}\" is not defined.`);\n        return;\n    }\n  }\n\n  console.error(\"extractDataByService error: no data to process.\");\n  return;\n}\n/**\n * @returns {array.Object} default data for ActivitiesChart\n */\n\n\nexport function getDefaultActivities() {\n  const activities = [];\n\n  for (let key in ACTIVITY_BY_KIND) {\n    activities.push({\n      activity: ACTIVITY_BY_KIND[key],\n      value: 0\n    });\n  }\n\n  return activities;\n}\n/**\n * @param {array.Object} userData\n * @returns {array.Object} data for ActivitiesChart\n */\n\nfunction getActivities(userData) {\n  const activities = [];\n\n  if (userData) {\n    for (let item of userData) {\n      console.log(item);\n      activities.push({\n        activity: ACTIVITY_BY_KIND[item.kind],\n        value: item.value\n      });\n    }\n\n    return activities;\n  }\n\n  return getDefaultActivities();\n}\n/**\n * @returns {array.Object} default data for AverageSessionsChart\n */\n\n\nexport function getDefaultAverageSessions() {\n  const averageSessions = [{\n    day: \"L\",\n    sessionLength: 0\n  }, {\n    day: \"M\",\n    sessionLength: 0\n  }, {\n    day: \"M\",\n    sessionLength: 0\n  }, {\n    day: \"J\",\n    sessionLength: 0\n  }, {\n    day: \"V\",\n    sessionLength: 0\n  }, {\n    day: \"S\",\n    sessionLength: 0\n  }, {\n    day: \"D\",\n    sessionLength: 0\n  }];\n  return averageSessions;\n}\n/**\n * @param {array.Object} userData\n * @returns {array.Object} data for AverageSessionsChart\n */\n\nfunction getAverageSessions(userData) {\n  let averageSessions = getDefaultAverageSessions();\n\n  for (let index in userData) {\n    averageSessions[index].sessionLength = userData[index].sessionLength;\n  }\n\n  return averageSessions;\n}\n/**\n * Build an array with the dates of the 7 previous days.\n * @returns {array.Object} default data for DailyActivityChart\n */\n\n\nexport function getDefaultDailyActivity() {\n  const dailyActivity = [];\n  let date = new Date(Date.now()); // eslint-disable-next-line no-unused-vars\n\n  for (let _ of \"1234567\") {\n    let dateFr = new Intl.DateTimeFormat(\"fr\").format(date);\n    dailyActivity.push({\n      day: dateFr.slice(0, 5),\n      kilogram: 0,\n      calories: 0\n    });\n    date.setDate(date.getDate() - 1);\n  }\n\n  dailyActivity.reverse();\n  return dailyActivity;\n}\n/**\n * @param {array.Object} userData\n * @returns {array.Object} data for DailyActivityChart\n */\n\nfunction getDailyActivity(userData) {\n  if (userData) {\n    const dailyActivity = [];\n\n    for (let item of userData) {\n      // eslint-disable-next-line no-unused-vars\n      const [yyyy, mm, dd] = item.day.split(\"-\");\n      dailyActivity.push({\n        day: `${dd}/${mm}`,\n        kilogram: item.kilogram,\n        calories: item.calories\n      });\n    }\n\n    return dailyActivity;\n  }\n\n  return getDefaultDailyActivity();\n}\n/**\n * @param {string} userData\n * @returns {string} user first name\n */\n\n\nfunction getFirstName(userData) {\n  return userData === \"can not get user\" ? \"unknown user\" : userData.data.userInfos.firstName;\n}\n/**\n * @returns {Object} default data for InfoCardsGroup\n */\n\n\nexport function getDefaultKeyData() {\n  return {\n    calorieCount: 0,\n    proteinCount: 0,\n    carbohydrateCount: 0,\n    lipidCount: 0\n  };\n}\n/**\n * @param {(string|Object)} userData\n * @returns {Object} data for InfoCardsGroup\n */\n\nfunction getKeyData(userData) {\n  return userData === \"can not get user\" ? getDefaultKeyData() : userData.data.keyData;\n}\n/**\n * @param {(string|Object)} userData\n * @returns data for ScoreChart\n */\n\n\nfunction getTodayScore(userData) {\n  return userData === \"can not get user\" ? 0 : userData.data.todayScore;\n}","map":{"version":3,"names":["useEffect","useState","BASE_URL","ACTIVITY_BY_KIND","useSportSeeApi","service","userId","data","setData","isLoading","setIsLoading","error","setError","endpoints","endpoint","getEndpointByService","fetchData","url","response","fetch","json","console","log","extractDataByService","extractedData","err","getActivities","getAverageSessions","sessions","getDailyActivity","getFirstName","getKeyData","getTodayScore","getDefaultActivities","activities","key","push","activity","value","userData","item","kind","getDefaultAverageSessions","averageSessions","day","sessionLength","index","getDefaultDailyActivity","dailyActivity","date","Date","now","_","dateFr","Intl","DateTimeFormat","format","slice","kilogram","calories","setDate","getDate","reverse","yyyy","mm","dd","split","userInfos","firstName","getDefaultKeyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","keyData","todayScore"],"sources":["/Users/jenniferbouhid/Desktop/sportsee/front-app/src/hooks/useSportSeeApi.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst BASE_URL = \"http://localhost:3000\";\n\nconst ACTIVITY_BY_KIND = {\n  1: \"Cardio\",\n  2: \"Energie\",\n  3: \"Endurance\",\n  4: \"Force\",\n  5: \"Vitesse\",\n  6: \"Intensité\",\n};\n\n/**\n * Hook used to extract data from SportSeeAPI to feed the dashboard.\n * @param {string} service\n * @param {string} userId\n * @returns {undefined|Object}\n */\nexport function useSportSeeApi(service, userId) {\n    /** ici le param service sera par ex \"daily-activity\" \n     * (liste ds fonction getEndpointByService) \n     */\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const endpoints ={\n    \"un\" : 1, \n    \"deux\" : 2, \n    \"trois\": 3,\n    \"un\" : 1, \n    \"deux\" : 2, \n    \"trois\": 3\n  }\n  const endpoint = getEndpointByService(service, userId);\n\n  useEffect(() => {\n    if (!endpoint) return;\n\n    setIsLoading(true);\n\n    async function fetchData() {\n      try {\n        const url = `${BASE_URL}/${endpoint}`;\n\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(extractDataByService(data, service))\n        const extractedData = extractDataByService(data, service);\n\n        setData(extractedData);\n      } catch (err) {\n        console.error(`An error occured while fetching ${endpoint} : ${err}`);\n\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [service, userId, endpoint]);\n\n  return { data, isLoading, error };\n}\n\n/**\n * @param {string} service \n * @param {string} userId \n * @returns {string} endpoint associated to the service and id\n */\nfunction getEndpointByService(service, userId) {\n    console.log(service)\n  switch (service) {\n    case \"activities\":\n      return `user/${userId}/performance`;\n\n    case \"average-sessions\":\n      return `user/${userId}/average-sessions`;\n\n    case \"daily-activity\":\n      return `user/${userId}/activity`;\n\n    case \"firstName\":\n      return `user/${userId}`;\n\n    case \"key-data\":\n      return `user/${userId}`;\n\n    case \"today-score\":\n      return `user/${userId}`;\n\n    default:\n      return null;\n  }\n}\n\n/**\n * Factory appealing specialized functions to extract data for each service.\n * @param {string|Object} data\n * @param {string} service\n * @returns {undefined|string|number|Object|array.Object}\n */\nfunction extractDataByService(data, service) {\n    console.log(data)\n  if (data) {\n    switch (service) {\n      case \"activities\":\n        return getActivities(data.data.data);\n\n      case \"average-sessions\":\n        return getAverageSessions(data.data.sessions);\n\n      case \"daily-activity\":\n        return getDailyActivity(data.data.sessions);\n\n      case \"firstName\":\n        return getFirstName(data);\n\n      case \"key-data\":\n        return getKeyData(data);\n\n      case \"today-score\":\n        return getTodayScore(data);\n\n      default:\n        console.error(\n          `extractDataByService error: service \"${service}\" is not defined.`\n        );\n        return;\n    }\n  }\n\n  console.error(\"extractDataByService error: no data to process.\");\n  return;\n}\n\n/**\n * @returns {array.Object} default data for ActivitiesChart\n */\nexport function getDefaultActivities() {\n  const activities = [];\n\n  for (let key in ACTIVITY_BY_KIND) {\n    activities.push({\n      activity: ACTIVITY_BY_KIND[key],\n      value: 0,\n    });\n  }\n\n  return activities;\n}\n\n/**\n * @param {array.Object} userData\n * @returns {array.Object} data for ActivitiesChart\n */\nfunction getActivities(userData) {\n  const activities = [];\n\n  if (userData) {\n    for (let item of userData) {\n        console.log(item)\n      activities.push({\n        activity: ACTIVITY_BY_KIND[item.kind],\n        value: item.value,\n      });\n    }\n\n    return activities;\n  }\n\n  return getDefaultActivities();\n}\n\n/**\n * @returns {array.Object} default data for AverageSessionsChart\n */\nexport function getDefaultAverageSessions() {\n  const averageSessions = [\n    {\n      day: \"L\",\n      sessionLength: 0,\n    },\n    {\n      day: \"M\",\n      sessionLength: 0,\n    },\n    {\n      day: \"M\",\n      sessionLength: 0,\n    },\n    {\n      day: \"J\",\n      sessionLength: 0,\n    },\n    {\n      day: \"V\",\n      sessionLength: 0,\n    },\n    {\n      day: \"S\",\n      sessionLength: 0,\n    },\n    {\n      day: \"D\",\n      sessionLength: 0,\n    },\n  ];\n\n  return averageSessions;\n}\n\n/**\n * @param {array.Object} userData\n * @returns {array.Object} data for AverageSessionsChart\n */\nfunction getAverageSessions(userData) {\n  let averageSessions = getDefaultAverageSessions();\n\n  for (let index in userData) {\n    averageSessions[index].sessionLength = userData[index].sessionLength;\n  }\n\n  return averageSessions;\n}\n\n/**\n * Build an array with the dates of the 7 previous days.\n * @returns {array.Object} default data for DailyActivityChart\n */\nexport function getDefaultDailyActivity() {\n  const dailyActivity = [];\n\n  let date = new Date(Date.now());\n\n  // eslint-disable-next-line no-unused-vars\n  for (let _ of \"1234567\") {\n    let dateFr = new Intl.DateTimeFormat(\"fr\").format(date);\n\n    dailyActivity.push({\n      day: dateFr.slice(0, 5),\n      kilogram: 0,\n      calories: 0,\n    });\n\n    date.setDate(date.getDate() - 1);\n  }\n\n  dailyActivity.reverse();\n\n  return dailyActivity;\n}\n\n/**\n * @param {array.Object} userData\n * @returns {array.Object} data for DailyActivityChart\n */\nfunction getDailyActivity(userData) {\n  if (userData) {\n    const dailyActivity = [];\n\n    for (let item of userData) {\n      // eslint-disable-next-line no-unused-vars\n      const [yyyy, mm, dd] = item.day.split(\"-\");\n\n      dailyActivity.push({\n        day: `${dd}/${mm}`,\n        kilogram: item.kilogram,\n        calories: item.calories,\n      });\n    }\n\n    return dailyActivity;\n  }\n\n  return getDefaultDailyActivity();\n}\n\n/**\n * @param {string} userData\n * @returns {string} user first name\n */\nfunction getFirstName(userData) {\n  return userData === \"can not get user\"\n    ? \"unknown user\"\n    : userData.data.userInfos.firstName;\n}\n\n/**\n * @returns {Object} default data for InfoCardsGroup\n */\nexport function getDefaultKeyData() {\n  return {\n    calorieCount: 0,\n    proteinCount: 0,\n    carbohydrateCount: 0,\n    lipidCount: 0,\n  };\n}\n\n/**\n * @param {(string|Object)} userData\n * @returns {Object} data for InfoCardsGroup\n */\nfunction getKeyData(userData) {\n  return userData === \"can not get user\"\n    ? getDefaultKeyData()\n    : userData.data.keyData;\n}\n\n/**\n * @param {(string|Object)} userData\n * @returns data for ScoreChart\n */\nfunction getTodayScore(userData) {\n  return userData === \"can not get user\" ? 0 : userData.data.todayScore;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}