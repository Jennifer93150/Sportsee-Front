{"ast":null,"code":"import { USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_MAIN_DATA, USER_PERFORMANCE } from \"../datas/data\";\nexport class MockedAPI {\n  /**\n   * Specialized functions to obtain the data of each service.\n   * @param {string|Object} data\n   * @param {string} service\n   * @returns {undefined|string|number|Object|array.Object}\n   */\n  getDataMockedByService(service, userId) {\n    if (userId) {\n      switch (service) {\n        case \"performance\":\n          return getActivitiesById(data.data.data);\n\n        case \"average-sessions\":\n          return getAverageSessions(data.data.sessions);\n\n        case \"daily-activity\":\n          return getDailyActivities(data.data.sessions);\n\n        case \"firstName\":\n          return getFirstName(data);\n\n        case \"user\":\n          return getKeyData(data);\n\n        case \"score\":\n          return getScore(data);\n\n        default:\n          console.error(`getDataByService error: service \"${service}\" is not defined.`);\n          return;\n      }\n    }\n\n    return;\n  }\n  /**\n  * @param {number} userId\n  * @returns {string}\n  */\n\n\n  getFirstNameById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.userInfos.firstName;\n      }\n    }\n\n    return \"Utilisateur inconnu\";\n  }\n  /**\n   * @param {number} userId\n   * @returns {array.Object}\n   */\n\n\n  getPerformancesById(userId) {\n    const ACTIVITY_BY_KIND = {\n      1: \"Cardio\",\n      2: \"Energie\",\n      3: \"Endurance\",\n      4: \"Force\",\n      5: \"Vitesse\",\n      6: \"Intensité\"\n    };\n    const activities = [];\n\n    for (let user of USER_PERFORMANCE) {\n      if (user.userId === userId) {\n        for (let item of user.data) {\n          activities.push({\n            activity: ACTIVITY_BY_KIND[item.kind],\n            value: item.value\n          });\n        }\n\n        return activities;\n      }\n    }\n  }\n  /**\n   * @param {number}} userId\n   * @returns {array.Object}\n   */\n\n\n  getAverageSessionsById(userId) {\n    const averageSessions = [{\n      day: \"L\",\n      sessionLength: 0\n    }, {\n      day: \"M\",\n      sessionLength: 0\n    }, {\n      day: \"M\",\n      sessionLength: 0\n    }, {\n      day: \"J\",\n      sessionLength: 0\n    }, {\n      day: \"V\",\n      sessionLength: 0\n    }, {\n      day: \"S\",\n      sessionLength: 0\n    }, {\n      day: \"D\",\n      sessionLength: 0\n    }];\n\n    for (let user of USER_AVERAGE_SESSIONS) {\n      if (user.userId === userId) {\n        for (let index in user.sessions) {\n          averageSessions[index].sessionLength = user.sessions[index].sessionLength;\n        }\n      }\n    }\n\n    return averageSessions;\n  }\n  /**\n   * @param {number}} userId\n   * @returns {array.Object}\n   */\n\n\n  getDailyActivitiesById(userId) {\n    const dailyActivity = [];\n\n    for (let user of USER_ACTIVITY) {\n      if (user.userId === userId) {\n        user.sessions.forEach((item, index) => {\n          dailyActivity.push({\n            day: `${index + 1}`,\n            kilogram: item.kilogram,\n            calories: item.calories\n          });\n        });\n        return dailyActivity;\n      }\n    }\n  }\n  /**\n   * @param {number} userId\n   * @returns {Object}\n   */\n\n\n  getKeyDataById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.keyData;\n      }\n    }\n\n    return this.defaultKeyData;\n  }\n  /**\n   * @param {number} userId\n   * @returns {number}\n   */\n\n\n  getScoreById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      console.log(\"donées mock\");\n\n      if (user.id === userId) {\n        return user.todayScore;\n      }\n    }\n\n    return 0;\n  }\n\n}","map":{"version":3,"names":["USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_MAIN_DATA","USER_PERFORMANCE","MockedAPI","getDataMockedByService","service","userId","getActivitiesById","data","getAverageSessions","sessions","getDailyActivities","getFirstName","getKeyData","getScore","console","error","getFirstNameById","user","id","userInfos","firstName","getPerformancesById","ACTIVITY_BY_KIND","activities","item","push","activity","kind","value","getAverageSessionsById","averageSessions","day","sessionLength","index","getDailyActivitiesById","dailyActivity","forEach","kilogram","calories","getKeyDataById","keyData","defaultKeyData","getScoreById","log","todayScore"],"sources":["/Users/jenniferbouhid/Desktop/sportsee/front-app/src/hooks/useMockedApi.jsx"],"sourcesContent":["import {\n    USER_ACTIVITY,\n    USER_AVERAGE_SESSIONS,\n    USER_MAIN_DATA,\n    USER_PERFORMANCE,\n} from \"../datas/data\";\n\n \nexport class MockedAPI {\n\n  /**\n   * Specialized functions to obtain the data of each service.\n   * @param {string|Object} data\n   * @param {string} service\n   * @returns {undefined|string|number|Object|array.Object}\n   */\n  getDataMockedByService(service, userId) {\n    if (userId) {\n      switch (service) {\n        case \"performance\":\n          return getActivitiesById(data.data.data);\n\n        case \"average-sessions\":\n          return getAverageSessions(data.data.sessions);\n\n        case \"daily-activity\":\n          return getDailyActivities(data.data.sessions);\n\n        case \"firstName\":\n          return getFirstName(data);\n\n        case \"user\":\n          return getKeyData(data);\n\n        case \"score\":\n          return getScore(data);\n\n        default:\n          console.error(\n            `getDataByService error: service \"${service}\" is not defined.`\n          );\n          return;\n      }\n    }\n\n    return;\n  }\n\n   /**\n   * @param {number} userId\n   * @returns {string}\n   */\n  getFirstNameById(userId) {\n      for (let user of USER_MAIN_DATA) {\n        if (user.id === userId) {\n          return user.userInfos.firstName;\n        }\n      }\n  \n      return \"Utilisateur inconnu\";\n  }\n  \n  /**\n   * @param {number} userId\n   * @returns {array.Object}\n   */\n  getPerformancesById(userId) {\n    const ACTIVITY_BY_KIND = {\n      1: \"Cardio\",\n      2: \"Energie\",\n      3: \"Endurance\",\n      4: \"Force\",\n      5: \"Vitesse\",\n      6: \"Intensité\",\n    };\n\n    const activities = [];\n\n    for (let user of USER_PERFORMANCE) {\n      if (user.userId === userId) {\n        for (let item of user.data) {\n          activities.push({\n            activity: ACTIVITY_BY_KIND[item.kind],\n            value: item.value,\n          });\n        }\n\n        return activities;\n      }\n    }\n  }\n\n  /**\n   * @param {number}} userId\n   * @returns {array.Object}\n   */\n  getAverageSessionsById(userId) {\n    const averageSessions = [\n      {\n        day: \"L\",\n        sessionLength: 0,\n      },\n      {\n        day: \"M\",\n        sessionLength: 0,\n      },\n      {\n        day: \"M\",\n        sessionLength: 0,\n      },\n      {\n        day: \"J\",\n        sessionLength: 0,\n      },\n      {\n        day: \"V\",\n        sessionLength: 0,\n      },\n      {\n        day: \"S\",\n        sessionLength: 0,\n      },\n      {\n        day: \"D\",\n        sessionLength: 0,\n      },\n    ];\n\n    for (let user of USER_AVERAGE_SESSIONS) {\n      if (user.userId === userId) {\n        for (let index in user.sessions) {\n          averageSessions[index].sessionLength =\n            user.sessions[index].sessionLength;\n        }\n      }\n    }\n\n    return averageSessions;\n  }\n\n  /**\n   * @param {number}} userId\n   * @returns {array.Object}\n   */\n  getDailyActivitiesById(userId) {\n    const dailyActivity = [];\n\n    for (let user of USER_ACTIVITY) {\n      if (user.userId === userId) {\n        user.sessions.forEach((item, index) => {\n          dailyActivity.push({\n            day: `${index+1}`,\n            kilogram: item.kilogram,\n            calories: item.calories,\n          });\n        });\n       \n        return dailyActivity;\n      }\n    }\n\n  }\n\n  /**\n   * @param {number} userId\n   * @returns {Object}\n   */\n  getKeyDataById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.keyData;\n      }\n    }\n\n    return this.defaultKeyData;\n  }\n\n  /**\n   * @param {number} userId\n   * @returns {number}\n   */\n  getScoreById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      console.log(\"donées mock\")\n      if (user.id === userId) {\n        return user.todayScore;\n      }\n    }\n    return 0;\n  }\n}\n  "],"mappings":"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"},"metadata":{},"sourceType":"module"}