{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { MockedAPI } from \"../hooks/useMockedApi\";\nconst BASE_URL = \"http://localhost:3000\";\nconst ACTIVITY_BY_KIND = {\n  1: \"Cardio\",\n  2: \"Energie\",\n  3: \"Endurance\",\n  4: \"Force\",\n  5: \"Vitesse\",\n  6: \"Intensité\"\n};\n/**\n * Service that retrieves data from SportSeeAPI to feed the dashboard.\n * @param {string} service\n * @param {string} userId\n * @returns {undefined|Object}\n */\n\nexport function useSportSeeApi(service, userId) {\n  _s();\n\n  /** the \"service\" parameter allows access to the endpoint*/\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const endpoints = {\n    \"user\": `user/${userId}`,\n    \"daily-activity\": `user/${userId}/activity`,\n    \"average-sessions\": `user/${userId}/average-sessions`,\n    \"performance\": `user/${userId}/performance`,\n    \"score\": `user/${userId}`\n  }; //const endpoint = getEndpointByService(service, userId);\n\n  let endpoint;\n  useEffect(() => {\n    for (let i in endpoints) {\n      let value = endpoints[i];\n\n      if (i === service) {\n        endpoint = value;\n      }\n    } //** si pas endpoint alors utilise les données mockées */\n\n\n    if (endpoint) {\n      /** a voir comment faire ici pr return les données mocked */\n      const mockedApi = new MockedAPI();\n      return mockedApi;\n    }\n\n    setIsLoading(true);\n    fetch(`${BASE_URL}/${endpoint}`).then(res => res.json()).then(data => {\n      console;\n      const extractedData = getDataByService(data, service);\n      setData(extractedData);\n      setIsLoading(false);\n    }).catch(err => {\n      console.log(err);\n      setError(true);\n    });\n  }, [service, userId, endpoint]);\n  return {\n    data,\n    isLoading,\n    error\n  };\n}\n/**\n * Specialized functions to obtain the data of each service.\n * @param {string|Object} data\n * @param {string} service\n * @returns {undefined|string|number|Object|array.Object}\n */\n\n_s(useSportSeeApi, \"WJYBqn2c+jk5gbHkf/rp07sHMmE=\");\n\nfunction getDataByService(data, service) {\n  if (data) {\n    switch (service) {\n      case \"performance\":\n        return getActivities(data.data.data);\n\n      case \"average-sessions\":\n        return getAverageSessions(data.data.sessions);\n\n      case \"daily-activity\":\n        return getDailyActivities(data.data.sessions);\n      // case \"firstName\":\n      //   return getFirstName(data);\n\n      case \"user\":\n        return getKeyData(data);\n\n      case \"score\":\n        return getScore(data);\n\n      default:\n        console.error(`getDataByService error: service \"${service}\" is not defined.`);\n        return;\n    }\n  }\n\n  console.error(\"getDataByService error: no data to process.\");\n  return;\n}\n/**\n * @returns {array.Object} default data for Performance.jsx\n */\n\n\nexport function defaultActivities() {\n  const activities = [];\n\n  for (let kind in ACTIVITY_BY_KIND) {\n    activities.push({\n      activity: ACTIVITY_BY_KIND[kind],\n      value: 0\n    });\n  }\n\n  return activities;\n}\n/**\n * @param {array.Object} userData\n * @returns {array.Object} data for Performance.jsx\n */\n\nfunction getActivities(userData) {\n  const activities = [];\n\n  if (userData) {\n    for (let item of userData) {\n      activities.push({\n        activity: ACTIVITY_BY_KIND[item.kind],\n        value: item.value\n      });\n    }\n\n    return activities;\n  }\n\n  return defaultActivities();\n}\n/**\n * @returns {array.Object} default data for AverageSessions.jsx\n */\n\n\nexport function defaultAverageSessions() {\n  const averageSessions = [{\n    day: \"L\",\n    sessionLength: 0\n  }, {\n    day: \"M\",\n    sessionLength: 0\n  }, {\n    day: \"M\",\n    sessionLength: 0\n  }, {\n    day: \"J\",\n    sessionLength: 0\n  }, {\n    day: \"V\",\n    sessionLength: 0\n  }, {\n    day: \"S\",\n    sessionLength: 0\n  }, {\n    day: \"D\",\n    sessionLength: 0\n  }];\n  return averageSessions;\n}\n/**\n * @param {array.Object} userData\n * @returns {array.Object} data for AverageSessions.jsx\n */\n\nfunction getAverageSessions(userData) {\n  let averageSessions = defaultAverageSessions();\n\n  for (let index in userData) {\n    /** replace each default (0) sessionLength with sessionLength from api data \n     * as well as the number of days by the initials of the days\n     */\n    averageSessions[index].sessionLength = userData[index].sessionLength;\n  }\n\n  return averageSessions;\n}\n/** A REVOIR \n * Build an array with the dates of the 7 previous days.\n * @returns {array.Object} default data for DailyActivities\n */\n\n\nexport function defaultDailyActivities() {\n  const dailyActivity = [];\n  let currentDate = new Date(Date.now()); // eslint-disable-next-line no-unused-vars\n\n  for (let _ of \"1234567\") {\n    //let date = currentDate.toLocaleDateString(\"fr\");\n    dailyActivity.push({\n      day: currentDate.getDate(),\n      kilogram: 0,\n      calories: 0\n    });\n  }\n\n  console.log(dailyActivity);\n  return dailyActivity;\n}\n/**\n * @param {array.Object} userData\n * @returns {array.Object} dailyActivity\n */\n\nfunction getDailyActivities(userData) {\n  if (userData) {\n    const dailyActivity = [];\n\n    for (let item of userData) {\n      /** split the date to get only the day */\n      const [yyyy, mm, dd] = item.day.split(\"-\");\n      const [diz, unit] = dd;\n      dailyActivity.push({\n        /** if the day is less than 10 I keep only the units digit */\n        day: `${dd}` < 10 ? unit : `${dd}`,\n        kilogram: item.kilogram,\n        calories: item.calories\n      });\n    }\n\n    return dailyActivity;\n  }\n\n  return defaultDailyActivities();\n}\n/**\n * @param {string} userData\n * @returns {string} user first name\n */\n// function getFirstName(userData) {\n//   return userData === \"can not get user\"\n//     ? \"unknown user\"\n//     : userData.data.userInfos.firstName;\n// }\n\n\nexport function defaultKeyData() {\n  return {\n    calorieCount: 0,\n    proteinCount: 0,\n    carbohydrateCount: 0,\n    lipidCount: 0\n  };\n}\n\nfunction getKeyData(userData) {\n  return userData === \"Impossible d'obtenir l'utilisateur\" ? defaultKeyData() : userData.data.keyData;\n}\n\nfunction getScore(userData) {\n  return userData === \"Impossible d'obtenir l'utilisateur\" ? 0 : userData.data.todayScore || userData.data.score;\n}","map":{"version":3,"names":["useEffect","useState","MockedAPI","BASE_URL","ACTIVITY_BY_KIND","useSportSeeApi","service","userId","data","setData","isLoading","setIsLoading","error","setError","endpoints","endpoint","i","value","mockedApi","fetch","then","res","json","console","extractedData","getDataByService","catch","err","log","getActivities","getAverageSessions","sessions","getDailyActivities","getKeyData","getScore","defaultActivities","activities","kind","push","activity","userData","item","defaultAverageSessions","averageSessions","day","sessionLength","index","defaultDailyActivities","dailyActivity","currentDate","Date","now","_","getDate","kilogram","calories","yyyy","mm","dd","split","diz","unit","defaultKeyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","keyData","todayScore","score"],"sources":["/Users/jenniferbouhid/Desktop/sportsee/front-app/src/hooks/useSportSeeApi.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { MockedAPI } from \"../hooks/useMockedApi\";\nconst BASE_URL = \"http://localhost:3000\";\n\nconst ACTIVITY_BY_KIND = {\n  1: \"Cardio\",\n  2: \"Energie\",\n  3: \"Endurance\",\n  4: \"Force\",\n  5: \"Vitesse\",\n  6: \"Intensité\",\n};\n\n/**\n * Service that retrieves data from SportSeeAPI to feed the dashboard.\n * @param {string} service\n * @param {string} userId\n * @returns {undefined|Object}\n */\nexport function useSportSeeApi(service, userId) {\n  /** the \"service\" parameter allows access to the endpoint*/\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const endpoints ={\n    \"user\" : `user/${userId}`, \n    \"daily-activity\" : `user/${userId}/activity`, \n    \"average-sessions\": `user/${userId}/average-sessions`,\n    \"performance\" : `user/${userId}/performance`,\n    \"score\" : `user/${userId}`\n  }\n  \n  //const endpoint = getEndpointByService(service, userId);\n  let endpoint;\n  useEffect(() => {\n    \n    for(let i in endpoints){\n        let value = endpoints[i];\n        if(i === service){\n            endpoint = value;\n        }\n    }\n//** si pas endpoint alors utilise les données mockées */\n    if (endpoint) {\n      /** a voir comment faire ici pr return les données mocked */\n      const mockedApi = new MockedAPI();\n      return mockedApi;\n    }\n    \n    setIsLoading(true);\n\n    fetch(`${BASE_URL}/${endpoint}`)\n        .then(res =>res.json())\n        .then((data) => {\n          console;\n            const extractedData = getDataByService(data, service);\n            setData(extractedData)\n            setIsLoading(false)\n        })\n        .catch ((err) =>{\n            console.log(err)\n            setError(true)\n        })\n   \n  }, [service, userId, endpoint]);\n\n  return { data, isLoading, error };\n}\n\n\n/**\n * Specialized functions to obtain the data of each service.\n * @param {string|Object} data\n * @param {string} service\n * @returns {undefined|string|number|Object|array.Object}\n */\nfunction getDataByService(data, service) {\n  if (data) {\n    switch (service) {\n      case \"performance\":\n        return getActivities(data.data.data);\n\n      case \"average-sessions\":\n        return getAverageSessions(data.data.sessions);\n\n      case \"daily-activity\":\n        return getDailyActivities(data.data.sessions);\n\n      // case \"firstName\":\n      //   return getFirstName(data);\n\n      case \"user\":\n        return getKeyData(data);\n\n      case \"score\":\n        return getScore(data);\n\n      default:\n        console.error(\n          `getDataByService error: service \"${service}\" is not defined.`\n        );\n        return;\n    }\n  }\n\n  console.error(\"getDataByService error: no data to process.\");\n  return;\n}\n\n/**\n * @returns {array.Object} default data for Performance.jsx\n */\nexport function defaultActivities() {\n  const activities = [];\n\n  for (let kind in ACTIVITY_BY_KIND) {\n    activities.push({\n      activity: ACTIVITY_BY_KIND[kind],\n      value: 0,\n    });\n  }\n\n  return activities;\n}\n\n/**\n * @param {array.Object} userData\n * @returns {array.Object} data for Performance.jsx\n */\nfunction getActivities(userData) {\n  const activities = [];\n  if (userData) {\n    for (let item of userData) {\n      activities.push({\n        activity: ACTIVITY_BY_KIND[item.kind],\n        value: item.value,\n      });\n    }\n\n    return activities;\n  }\n\n  return defaultActivities();\n}\n\n/**\n * @returns {array.Object} default data for AverageSessions.jsx\n */\nexport function defaultAverageSessions() {\n  const averageSessions = [\n    {\n      day: \"L\",\n      sessionLength: 0,\n    },\n    {\n      day: \"M\",\n      sessionLength: 0,\n    },\n    {\n      day: \"M\",\n      sessionLength: 0,\n    },\n    {\n      day: \"J\",\n      sessionLength: 0,\n    },\n    {\n      day: \"V\",\n      sessionLength: 0,\n    },\n    {\n      day: \"S\",\n      sessionLength: 0,\n    },\n    {\n      day: \"D\",\n      sessionLength: 0,\n    },\n  ];\n\n  return averageSessions;\n}\n\n/**\n * @param {array.Object} userData\n * @returns {array.Object} data for AverageSessions.jsx\n */\nfunction getAverageSessions(userData) {\n  \n  let averageSessions = defaultAverageSessions();\n  \n  for (let index in userData) {\n    /** replace each default (0) sessionLength with sessionLength from api data \n     * as well as the number of days by the initials of the days\n     */\n    averageSessions[index].sessionLength = userData[index].sessionLength;\n  }\n  \n  return averageSessions;\n}\n\n/** A REVOIR \n * Build an array with the dates of the 7 previous days.\n * @returns {array.Object} default data for DailyActivities\n */\nexport function defaultDailyActivities() {\n  const dailyActivity = [];\n\n  let currentDate = new Date(Date.now());\n\n  // eslint-disable-next-line no-unused-vars\n  for (let _ of \"1234567\") {\n   \n    //let date = currentDate.toLocaleDateString(\"fr\");\n\n    dailyActivity.push({\n      day: currentDate.getDate(),\n      kilogram: 0,\n      calories: 0,\n    });\n    \n  }\nconsole.log(dailyActivity)\n  return dailyActivity;\n}\n\n/**\n * @param {array.Object} userData\n * @returns {array.Object} dailyActivity\n */\nfunction getDailyActivities(userData) {\n  \n  if (userData) {\n    const dailyActivity = [];\n\n    for (let item of userData) {\n      /** split the date to get only the day */\n      const [yyyy, mm, dd] = item.day.split(\"-\");\n      const [diz, unit] = dd\n      \n      dailyActivity.push({\n        /** if the day is less than 10 I keep only the units digit */\n        day: `${dd}` < 10 ? unit : `${dd}`,\n        kilogram: item.kilogram,\n        calories: item.calories,\n      });\n    }\n    return dailyActivity;\n  }\n\n  return defaultDailyActivities();\n}\n\n/**\n * @param {string} userData\n * @returns {string} user first name\n */\n// function getFirstName(userData) {\n//   return userData === \"can not get user\"\n//     ? \"unknown user\"\n//     : userData.data.userInfos.firstName;\n// }\n\n\nexport function defaultKeyData() {\n  return {\n    calorieCount: 0,\n    proteinCount: 0,\n    carbohydrateCount: 0,\n    lipidCount: 0,\n  };\n}\n\n\nfunction getKeyData(userData) {\n  return userData === \"Impossible d'obtenir l'utilisateur\" ? defaultKeyData() : userData.data.keyData;\n}\n\n\nfunction getScore(userData) {\n  return userData === \"Impossible d'obtenir l'utilisateur\" ? 0 : userData.data.todayScore || userData.data.score;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}