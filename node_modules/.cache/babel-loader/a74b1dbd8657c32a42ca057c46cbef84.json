{"ast":null,"code":"import { USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_MAIN_DATA, USER_PERFORMANCE } from \"../datas/data\";\nconst ACTIVITY_BY_KIND = {\n  1: \"Cardio\",\n  2: \"Energie\",\n  3: \"Endurance\",\n  4: \"Force\",\n  5: \"Vitesse\",\n  6: \"Intensité\"\n};\nexport class MockedAPI {\n  /**\n  * @param {number} userId\n  * @returns {string}\n  */\n  getFirstNameById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.userInfos.firstName;\n      }\n    }\n\n    return \"Utilisateur inconnu\";\n  }\n  /**\n  * @returns {array.Object}\n  */\n\n\n  get defaultActivities() {\n    const activities = [];\n\n    for (let key in ACTIVITY_BY_KIND) {\n      activities.push({\n        activity: ACTIVITY_BY_KIND[key],\n        value: 0\n      });\n    }\n\n    return activities;\n  }\n  /**\n   * @param {number} userId\n   * @returns {array.Object}\n   */\n\n\n  getActivitiesById(userId) {\n    const activities = [];\n\n    for (let user of USER_PERFORMANCE) {\n      if (user.userId === userId) {\n        for (let item of user.data) {\n          activities.push({\n            activity: ACTIVITY_BY_KIND[item.kind],\n            value: item.value\n          });\n        }\n\n        return activities;\n      }\n    }\n\n    return this.defaultActivities;\n  }\n  /**\n   * @returns {array.Object}\n   */\n\n\n  get defaultAverageSessions() {\n    const averageSessions = [{\n      day: \"L\",\n      sessionLength: 0\n    }, {\n      day: \"M\",\n      sessionLength: 0\n    }, {\n      day: \"M\",\n      sessionLength: 0\n    }, {\n      day: \"J\",\n      sessionLength: 0\n    }, {\n      day: \"V\",\n      sessionLength: 0\n    }, {\n      day: \"S\",\n      sessionLength: 0\n    }, {\n      day: \"D\",\n      sessionLength: 0\n    }];\n    return averageSessions;\n  }\n\n  getAverageSessionsById(userId) {\n    const averageSessions = [{\n      day: \"L\",\n      sessionLength: 0\n    }, {\n      day: \"M\",\n      sessionLength: 0\n    }, {\n      day: \"M\",\n      sessionLength: 0\n    }, {\n      day: \"J\",\n      sessionLength: 0\n    }, {\n      day: \"V\",\n      sessionLength: 0\n    }, {\n      day: \"S\",\n      sessionLength: 0\n    }, {\n      day: \"D\",\n      sessionLength: 0\n    }];\n\n    for (let user of USER_AVERAGE_SESSIONS) {\n      if (user.userId === userId) {\n        for (let index in user.sessions) {\n          averageSessions[index].sessionLength = user.sessions[index].sessionLength;\n        }\n      }\n    }\n\n    return averageSessions;\n  }\n  /**\n  * @returns {array.Object}\n  */\n\n\n  get defaultDailyActivities() {\n    const dailyActivity = [];\n    let date = new Date(Date.now()); // eslint-disable-next-line no-unused-vars\n\n    for (let _ of \"1234567\") {\n      let dateFr = new Intl.DateTimeFormat(\"fr\").format(date);\n      dailyActivity.push({\n        day: dateFr.slice(0, 5),\n        kilogram: 0,\n        calories: 0\n      });\n      date.setDate(date.getDate() - 1);\n    }\n\n    dailyActivity.reverse();\n    return dailyActivity;\n  }\n  /**\n   * @param {number}} userId\n   * @returns {array.Object}\n   */\n\n\n  getDailyActivitiesById(userId) {\n    const dailyActivity = [];\n\n    for (let user of USER_ACTIVITY) {\n      if (user.userId === userId) {\n        user.sessions.forEach((item, index) => {\n          dailyActivity.push({\n            day: `${dd}`,\n            kilogram: item.kilogram,\n            calories: item.calories\n          });\n        }); // for (let item of user.sessions) {\n        //   // eslint-disable-next-line no-unused-vars\n        //   const [yyyy, mm, dd] = item.day.split(\"-\");\n        //   dailyActivity.push({\n        //     day: `${dd}`,\n        //     kilogram: item.kilogram,\n        //     calories: item.calories,\n        //   });\n        // }\n\n        return dailyActivity;\n      }\n    }\n\n    return this.defaultDailyActivities;\n  }\n  /**\n   * @returns {Object}\n   */\n\n\n  get defaultKeyData() {\n    return {\n      calorieCount: null,\n      proteinCount: null,\n      carbohydrateCount: null,\n      lipidCount: null\n    };\n  }\n  /**\n   * @param {number} userId\n   * @returns {Object}\n   */\n\n\n  getKeyDataById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.keyData;\n      }\n    }\n\n    return this.defaultKeyData;\n  }\n  /**\n   * @param {number} userId\n   * @returns {number}\n   */\n\n\n  getTodayScoreById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.todayScore;\n      }\n    }\n\n    return 0;\n  }\n\n}","map":{"version":3,"names":["USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_MAIN_DATA","USER_PERFORMANCE","ACTIVITY_BY_KIND","MockedAPI","getFirstNameById","userId","user","id","userInfos","firstName","defaultActivities","activities","key","push","activity","value","getActivitiesById","item","data","kind","defaultAverageSessions","averageSessions","day","sessionLength","getAverageSessionsById","index","sessions","defaultDailyActivities","dailyActivity","date","Date","now","_","dateFr","Intl","DateTimeFormat","format","slice","kilogram","calories","setDate","getDate","reverse","getDailyActivitiesById","forEach","dd","defaultKeyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","getKeyDataById","keyData","getTodayScoreById","todayScore"],"sources":["/Users/jenniferbouhid/Desktop/sportsee/front-app/src/hooks/useMockedApi.jsx"],"sourcesContent":["import {\n    USER_ACTIVITY,\n    USER_AVERAGE_SESSIONS,\n    USER_MAIN_DATA,\n    USER_PERFORMANCE,\n  } from \"../datas/data\";\n\n  \n  const ACTIVITY_BY_KIND = {\n    1: \"Cardio\",\n    2: \"Energie\",\n    3: \"Endurance\",\n    4: \"Force\",\n    5: \"Vitesse\",\n    6: \"Intensité\",\n  };\n  \nexport class MockedAPI {\n   /**\n   * @param {number} userId\n   * @returns {string}\n   */\n  getFirstNameById(userId) {\n      for (let user of USER_MAIN_DATA) {\n        if (user.id === userId) {\n          return user.userInfos.firstName;\n        }\n      }\n  \n      return \"Utilisateur inconnu\";\n  }\n  \n   /**\n   * @returns {array.Object}\n   */\n  get defaultActivities() {\n      const activities = [];\n\n      for (let key in ACTIVITY_BY_KIND) {\n        activities.push({\n          activity: ACTIVITY_BY_KIND[key],\n          value: 0,\n        });\n      }\n\n      return activities;\n  }\n\n  /**\n   * @param {number} userId\n   * @returns {array.Object}\n   */\n  getActivitiesById(userId) {\n    const activities = [];\n\n    for (let user of USER_PERFORMANCE) {\n      if (user.userId === userId) {\n        for (let item of user.data) {\n          activities.push({\n            activity: ACTIVITY_BY_KIND[item.kind],\n            value: item.value,\n          });\n        }\n\n        return activities;\n      }\n    }\n\n    return this.defaultActivities;\n  }\n\n  /**\n   * @returns {array.Object}\n   */\n  get defaultAverageSessions() {\n    const averageSessions = [\n      {\n        day: \"L\",\n        sessionLength: 0,\n      },\n      {\n        day: \"M\",\n        sessionLength: 0,\n      },\n      {\n        day: \"M\",\n        sessionLength: 0,\n      },\n      {\n        day: \"J\",\n        sessionLength: 0,\n      },\n      {\n        day: \"V\",\n        sessionLength: 0,\n      },\n      {\n        day: \"S\",\n        sessionLength: 0,\n      },\n      {\n        day: \"D\",\n        sessionLength: 0,\n      },\n    ];\n\n    return averageSessions;\n  }\n\n   getAverageSessionsById(userId) {\n    const averageSessions = [\n      {\n        day: \"L\",\n        sessionLength: 0,\n      },\n      {\n        day: \"M\",\n        sessionLength: 0,\n      },\n      {\n        day: \"M\",\n        sessionLength: 0,\n      },\n      {\n        day: \"J\",\n        sessionLength: 0,\n      },\n      {\n        day: \"V\",\n        sessionLength: 0,\n      },\n      {\n        day: \"S\",\n        sessionLength: 0,\n      },\n      {\n        day: \"D\",\n        sessionLength: 0,\n      },\n    ];\n\n    for (let user of USER_AVERAGE_SESSIONS) {\n      if (user.userId === userId) {\n        for (let index in user.sessions) {\n          averageSessions[index].sessionLength =\n            user.sessions[index].sessionLength;\n        }\n      }\n    }\n\n    return averageSessions;\n  }\n\n   /**\n   * @returns {array.Object}\n   */\n  get defaultDailyActivities() {\n    const dailyActivity = [];\n\n    let date = new Date(Date.now());\n\n    // eslint-disable-next-line no-unused-vars\n    for (let _ of \"1234567\") {\n      let dateFr = new Intl.DateTimeFormat(\"fr\").format(date);\n\n      dailyActivity.push({\n        day: dateFr.slice(0, 5),\n        kilogram: 0,\n        calories: 0,\n      });\n\n      date.setDate(date.getDate() - 1);\n    }\n\n    dailyActivity.reverse();\n\n    return dailyActivity;\n  }\n\n  /**\n   * @param {number}} userId\n   * @returns {array.Object}\n   */\n  getDailyActivitiesById(userId) {\n    const dailyActivity = [];\n\n    for (let user of USER_ACTIVITY) {\n      if (user.userId === userId) {\n        user.sessions.forEach((item, index) => {\n          dailyActivity.push({\n                day: `${dd}`,\n                kilogram: item.kilogram,\n                calories: item.calories,\n              });\n        });\n        // for (let item of user.sessions) {\n        //   // eslint-disable-next-line no-unused-vars\n        //   const [yyyy, mm, dd] = item.day.split(\"-\");\n\n        //   dailyActivity.push({\n        //     day: `${dd}`,\n        //     kilogram: item.kilogram,\n        //     calories: item.calories,\n        //   });\n        // }\n\n        return dailyActivity;\n      }\n    }\n\n    return this.defaultDailyActivities;\n  }\n\n  /**\n   * @returns {Object}\n   */\n  get defaultKeyData() {\n    return {\n      calorieCount: null,\n      proteinCount: null,\n      carbohydrateCount: null,\n      lipidCount: null,\n    };\n  }\n\n  /**\n   * @param {number} userId\n   * @returns {Object}\n   */\n  getKeyDataById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.keyData;\n      }\n    }\n\n    return this.defaultKeyData;\n  }\n\n\n  /**\n   * @param {number} userId\n   * @returns {number}\n   */\n  getTodayScoreById(userId) {\n    for (let user of USER_MAIN_DATA) {\n      if (user.id === userId) {\n        return user.todayScore;\n      }\n    }\n\n    return 0;\n  }\n}\n  "],"mappings":"AAAA,SACIA,aADJ,EAEIC,qBAFJ,EAGIC,cAHJ,EAIIC,gBAJJ,QAKS,eALT;AAQE,MAAMC,gBAAgB,GAAG;EACvB,GAAG,QADoB;EAEvB,GAAG,SAFoB;EAGvB,GAAG,WAHoB;EAIvB,GAAG,OAJoB;EAKvB,GAAG,SALoB;EAMvB,GAAG;AANoB,CAAzB;AASF,OAAO,MAAMC,SAAN,CAAgB;EACpB;AACH;AACA;AACA;EACEC,gBAAgB,CAACC,MAAD,EAAS;IACrB,KAAK,IAAIC,IAAT,IAAiBN,cAAjB,EAAiC;MAC/B,IAAIM,IAAI,CAACC,EAAL,KAAYF,MAAhB,EAAwB;QACtB,OAAOC,IAAI,CAACE,SAAL,CAAeC,SAAtB;MACD;IACF;;IAED,OAAO,qBAAP;EACH;EAEA;AACH;AACA;;;EACuB,IAAjBC,iBAAiB,GAAG;IACpB,MAAMC,UAAU,GAAG,EAAnB;;IAEA,KAAK,IAAIC,GAAT,IAAgBV,gBAAhB,EAAkC;MAChCS,UAAU,CAACE,IAAX,CAAgB;QACdC,QAAQ,EAAEZ,gBAAgB,CAACU,GAAD,CADZ;QAEdG,KAAK,EAAE;MAFO,CAAhB;IAID;;IAED,OAAOJ,UAAP;EACH;EAED;AACF;AACA;AACA;;;EACEK,iBAAiB,CAACX,MAAD,EAAS;IACxB,MAAMM,UAAU,GAAG,EAAnB;;IAEA,KAAK,IAAIL,IAAT,IAAiBL,gBAAjB,EAAmC;MACjC,IAAIK,IAAI,CAACD,MAAL,KAAgBA,MAApB,EAA4B;QAC1B,KAAK,IAAIY,IAAT,IAAiBX,IAAI,CAACY,IAAtB,EAA4B;UAC1BP,UAAU,CAACE,IAAX,CAAgB;YACdC,QAAQ,EAAEZ,gBAAgB,CAACe,IAAI,CAACE,IAAN,CADZ;YAEdJ,KAAK,EAAEE,IAAI,CAACF;UAFE,CAAhB;QAID;;QAED,OAAOJ,UAAP;MACD;IACF;;IAED,OAAO,KAAKD,iBAAZ;EACD;EAED;AACF;AACA;;;EAC4B,IAAtBU,sBAAsB,GAAG;IAC3B,MAAMC,eAAe,GAAG,CACtB;MACEC,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CADsB,EAKtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CALsB,EAStB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CATsB,EAatB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CAbsB,EAiBtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CAjBsB,EAqBtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CArBsB,EAyBtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CAzBsB,CAAxB;IA+BA,OAAOF,eAAP;EACD;;EAEAG,sBAAsB,CAACnB,MAAD,EAAS;IAC9B,MAAMgB,eAAe,GAAG,CACtB;MACEC,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CADsB,EAKtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CALsB,EAStB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CATsB,EAatB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CAbsB,EAiBtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CAjBsB,EAqBtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CArBsB,EAyBtB;MACED,GAAG,EAAE,GADP;MAEEC,aAAa,EAAE;IAFjB,CAzBsB,CAAxB;;IA+BA,KAAK,IAAIjB,IAAT,IAAiBP,qBAAjB,EAAwC;MACtC,IAAIO,IAAI,CAACD,MAAL,KAAgBA,MAApB,EAA4B;QAC1B,KAAK,IAAIoB,KAAT,IAAkBnB,IAAI,CAACoB,QAAvB,EAAiC;UAC/BL,eAAe,CAACI,KAAD,CAAf,CAAuBF,aAAvB,GACEjB,IAAI,CAACoB,QAAL,CAAcD,KAAd,EAAqBF,aADvB;QAED;MACF;IACF;;IAED,OAAOF,eAAP;EACD;EAEA;AACH;AACA;;;EAC4B,IAAtBM,sBAAsB,GAAG;IAC3B,MAAMC,aAAa,GAAG,EAAtB;IAEA,IAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAAX,CAH2B,CAK3B;;IACA,KAAK,IAAIC,CAAT,IAAc,SAAd,EAAyB;MACvB,IAAIC,MAAM,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8BC,MAA9B,CAAqCP,IAArC,CAAb;MAEAD,aAAa,CAACf,IAAd,CAAmB;QACjBS,GAAG,EAAEW,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgB,CAAhB,CADY;QAEjBC,QAAQ,EAAE,CAFO;QAGjBC,QAAQ,EAAE;MAHO,CAAnB;MAMAV,IAAI,CAACW,OAAL,CAAaX,IAAI,CAACY,OAAL,KAAiB,CAA9B;IACD;;IAEDb,aAAa,CAACc,OAAd;IAEA,OAAOd,aAAP;EACD;EAED;AACF;AACA;AACA;;;EACEe,sBAAsB,CAACtC,MAAD,EAAS;IAC7B,MAAMuB,aAAa,GAAG,EAAtB;;IAEA,KAAK,IAAItB,IAAT,IAAiBR,aAAjB,EAAgC;MAC9B,IAAIQ,IAAI,CAACD,MAAL,KAAgBA,MAApB,EAA4B;QAC1BC,IAAI,CAACoB,QAAL,CAAckB,OAAd,CAAsB,CAAC3B,IAAD,EAAOQ,KAAP,KAAiB;UACrCG,aAAa,CAACf,IAAd,CAAmB;YACbS,GAAG,EAAG,GAAEuB,EAAG,EADE;YAEbP,QAAQ,EAAErB,IAAI,CAACqB,QAFF;YAGbC,QAAQ,EAAEtB,IAAI,CAACsB;UAHF,CAAnB;QAKD,CAND,EAD0B,CAQ1B;QACA;QACA;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA,OAAOX,aAAP;MACD;IACF;;IAED,OAAO,KAAKD,sBAAZ;EACD;EAED;AACF;AACA;;;EACoB,IAAdmB,cAAc,GAAG;IACnB,OAAO;MACLC,YAAY,EAAE,IADT;MAELC,YAAY,EAAE,IAFT;MAGLC,iBAAiB,EAAE,IAHd;MAILC,UAAU,EAAE;IAJP,CAAP;EAMD;EAED;AACF;AACA;AACA;;;EACEC,cAAc,CAAC9C,MAAD,EAAS;IACrB,KAAK,IAAIC,IAAT,IAAiBN,cAAjB,EAAiC;MAC/B,IAAIM,IAAI,CAACC,EAAL,KAAYF,MAAhB,EAAwB;QACtB,OAAOC,IAAI,CAAC8C,OAAZ;MACD;IACF;;IAED,OAAO,KAAKN,cAAZ;EACD;EAGD;AACF;AACA;AACA;;;EACEO,iBAAiB,CAAChD,MAAD,EAAS;IACxB,KAAK,IAAIC,IAAT,IAAiBN,cAAjB,EAAiC;MAC/B,IAAIM,IAAI,CAACC,EAAL,KAAYF,MAAhB,EAAwB;QACtB,OAAOC,IAAI,CAACgD,UAAZ;MACD;IACF;;IAED,OAAO,CAAP;EACD;;AA3OoB"},"metadata":{},"sourceType":"module"}