{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { MockedData } from \"./useMockedData\";\nimport { useSportSeeApi } from \"./useSportSeeApi\";\nimport { dataMocked } from \"./DataMocked\";\nimport { Error } from \"../pages/Error\";\n/**\n * recovery of api data or mocked data if the back is not available\n * @param {string} service \n * @param {number} userId \n * @returns {array.Object}\n */\n\nexport function FacadePattern(service, userId) {\n  _s();\n\n  let getMockedData;\n  const {\n    error,\n    isLoading\n  } = useSportSeeApi(service, userId);\n  console.log(error, isLoading);\n  /**\n   * If api access unavailable use mocked data\n   */\n\n  if (isLoading && !error) {\n    const mockedData = new MockedData();\n    getMockedData = mockedData.getDataMockedByService(service, userId);\n    return getMockedData;\n  }\n}\n\n_s(FacadePattern, \"LAMQyYQJPMsYUNED0TQL0f200e0=\", false, function () {\n  return [useSportSeeApi];\n});\n\n_c = FacadePattern;\n\nvar _c;\n\n$RefreshReg$(_c, \"FacadePattern\");","map":{"version":3,"names":["MockedData","useSportSeeApi","dataMocked","Error","FacadePattern","service","userId","getMockedData","error","isLoading","console","log","mockedData","getDataMockedByService"],"sources":["/Users/jenniferbouhid/Desktop/Sportsee/Sportsee-Front/src/services/FacadePattern.js"],"sourcesContent":["import { MockedData } from \"./useMockedData\";\nimport { useSportSeeApi } from \"./useSportSeeApi\";\nimport { dataMocked } from \"./DataMocked\";\nimport { Error } from \"../pages/Error\";\n\n/**\n * recovery of api data or mocked data if the back is not available\n * @param {string} service \n * @param {number} userId \n * @returns {array.Object}\n */\nexport function FacadePattern(service, userId) {\n    let getMockedData;\n    const {error, isLoading} = useSportSeeApi(service, userId);\n    console.log(error, isLoading)\n    /**\n     * If api access unavailable use mocked data\n     */\n    if( isLoading && !error) {\n        const mockedData = new MockedData();\n        getMockedData = mockedData.getDataMockedByService(service, userId);\n        return getMockedData;\n    }\n    \n\n    \n}\n\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,MAAhC,EAAwC;EAAA;;EAC3C,IAAIC,aAAJ;EACA,MAAM;IAACC,KAAD;IAAQC;EAAR,IAAqBR,cAAc,CAACI,OAAD,EAAUC,MAAV,CAAzC;EACAI,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,SAAnB;EACA;AACJ;AACA;;EACI,IAAIA,SAAS,IAAI,CAACD,KAAlB,EAAyB;IACrB,MAAMI,UAAU,GAAG,IAAIZ,UAAJ,EAAnB;IACAO,aAAa,GAAGK,UAAU,CAACC,sBAAX,CAAkCR,OAAlC,EAA2CC,MAA3C,CAAhB;IACA,OAAOC,aAAP;EACH;AAIJ;;GAfeH,a;UAEeH,c;;;KAFfG,a"},"metadata":{},"sourceType":"module"}